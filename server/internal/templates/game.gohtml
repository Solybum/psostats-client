{{define "game"}}
    <html lang="en">
    <head>
        <meta name="viewport" content="width=device-width"/>
        <meta property="og:site_name" content="PSOStats"/>
        <meta property="og:title" content="{{ .Game.QuestName }} - {{ .FormattedQuestTime}}"/>
        <meta property="og:description" content="Run by {{ range $index,$player := .Game.AllPlayers }}{{ if $index }}, {{ end }}{{ $player.Name }}({{ $player.Class }}){{ end }}"/>
        <title>PSOStats</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
        <link href="/static/main2.css" rel="stylesheet" type="text/css">
        <script src='https://code.jquery.com/jquery-1.11.3.min.js'></script>
        <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
              integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
              crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
                integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
                crossorigin=""></script>
        <script src="/static/LeafletPlayback.min.js"></script>
    </head>
    <style>
        .psostats-chart {
            background-color: #444;
            margin-bottom: 4px;
        }
        .psostats-equipment {
            padding: 8px 16px;
        }
        .current-player {
            font-weight: bold;
        }
        .row {
            margin-bottom: 16px;
        }
        a.list-group-item {
            color: #abcdff;
        }
        .map { height: 500px; }
        .leaflet-container {
            background: #181818;
        }
        .player1-icon {
            border-radius: 8px;
            background-color: rgba(255, 79, 79, 0.8)
        }
        .player2-icon {
            border-radius: 8px;
            background-color: rgba(79, 255, 114, 0.8)
        }
        .player3-icon {
            border-radius: 8px;
            background-color: rgba(255, 252, 79, 0.86)
        }
        .player4-icon {
            border-radius: 8px;
            background-color: rgba(79, 108, 255, 0.8)
        }
        .undefined-icon {
            border-radius: 8px;
            background-color: rgba(255, 162, 79, 0.8)
        }
        .techs-cast-item {
            margin: -8px 0;
            padding-left: 8px;
            border-right: 1px solid #333;
            display: inline-block;
            width: 32%;
        }
        .techs-cast-item:first-of-type {
            padding-left: 0;
        }
        .techs-cast-item:last-of-type {
            border-right: none;
        }
    </style>
    <body>
    <div class="container">
        {{ template "navbar" }}
        <div class="row psostats-heading">
            <div class="col">
                <h1>{{ .Game.QuestName}} <small class="text-muted">Episode {{ .Game.Episode }}</small></h1>
                <h2 class="display-6">{{ if gt .Game.Points 0}}{{ .Game.Points }} Points{{ else }}{{ .FormattedQuestTime}}{{ end }}</h2>
            </div>
        </div>
        <div class="row psostats-questbasics">
            <div class="col-12 col-lg-6">
                <ul class="list-group list-group-flush" style="margin-bottom: 4px;">
                    <li class="list-group-item">Category: <span style="float: right">{{ len .Game.AllPlayers }}p {{ if .Game.PbCategory}}PB{{else}}No-PB{{end}}</span></li>
                    <li class="list-group-item">Difficulty: <span style="float: right">{{ .Game.Difficulty }}</span></li>
                    {{ if gt .Game.Points 0}}<li class="list-group-item">Time: <span style="float: right">{{ .FormattedQuestTime}}</span></li>{{ end }}
                    <li class="list-group-item">Date: <span style="float: right">{{ .Game.QuestStartDate }}</span></li>
                    <a class="list-group-item" href="/players/{{ .Game.UserName }}">Player: <span style="float: right">{{ .Game.UserName }}</span></a>
                    <li class="list-group-item">Deaths: <span style="float: right">{{ .Game.DeathCount }}</span></li>
                    <li class="list-group-item">Enemies Killed: <span style="float: right">{{ .Game.MonstersDead }}</span></li>
                    {{ if gt .Game.FTUsed 0 }}<li class="list-group-item">FT Used: <span style="float: right">{{ .Game.FTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.DTUsed 0 }}<li class="list-group-item">DT Used: <span style="float: right">{{ .Game.DTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.CTUsed 0 }}<li class="list-group-item">CT Used: <span style="float: right">{{ .Game.CTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.TPUsed 0 }}<li class="list-group-item">TP Used: <span style="float: right">{{ .Game.TPUsed }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0 }}<li class="list-group-item">Time Moving: <span style="float: right">{{ .TimeMoving }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0}}<li class="list-group-item">Time Standing: <span style="float: right">{{ .TimeStanding }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0 }}<li class="list-group-item">Time Attacking: <span style="float: right">{{ .TimeAttacking }}</span></li> {{ end }}
                    {{ if gt .TimeCasting 0 }}<li class="list-group-item">Time Casting: <span style="float: right">{{ .FormattedTimeCasting }}</span></li> {{ end }}
                    {{ if gt (len .VideoUrl) 0 }}<a class="list-group-item" href="{{ .VideoUrl }}">Video</a> {{ end }}
                </ul>
                <ul class="list-group list-group-flush" style="margin-bottom: 4px;">
                    {{$game := .Game}}
                    {{ $root := . }}
                    {{ range $index, $player := .Game.AllPlayers }}
                        {{ if index $root.HasPov $index}}
                            <a href="/game/{{ $game.Id }}/{{ $index }}" class="list-group-item{{ if eq $player.GuildCard $game.GuildCard }} current-player{{ end }}">{{ $player.Class }} (Lv.{{ $player.Level }}) {{ $player.Name }}</a>
                        {{ else }}
                            <li class="list-group-item">{{ $player.Class }} (Lv.{{ $player.Level }}) {{ $player.Name }}</li>
                        {{ end }}

                    {{ end }}
                </ul>
                {{if gt (len $game.TechsCast) 0}}
                <ul class="list-group list-group-flush" style="margin-bottom: 4px">
                    {{ range $group := .TechsInOrder }}
                        <li class="list-group-item">
                            {{ range $tech := $group }}
                                <span class="techs-cast-item"><img alt="{{ $tech }}" src="/static/icons/{{ $tech }}_icon.png"/><span style="margin-left: 8px">{{if index $game.TechsCast $tech  }} {{ index $game.TechsCast $tech }} {{ else }} <span style="color: rgba(255,255,255,0.3)">0</span>{{ end }}</span></span>
                            {{ end }}
                        </li>
                    {{ end }}
                </ul>
                {{ end }}
            </div>
            <div class="col-12 col-lg-6">
                <div class="psostats-chart">
                    <h4 class="psostats-equipment">{{ .Game.PlayerName}}'s Equipment</h4>
                    {{ if gt (len .Weapons) 0 }}
                        <div id="weapon-donut" ></div>
                        <div class="psostats-equipment">
                            {{ range .Frames }} <div><img alt="Frame" src="/static/Frame_icon.png"/> {{ .Display }}</div>{{ end}}
                            {{ range .Units }} <div><img alt="Unit" src="/static/Unit_icon.png" style="margin-left: 16px;"/> {{ .Display }}</div> {{ end}}
                            {{ range .Barriers }} <div><img alt="Barrier" src="/static/Shield_icon.png"/> {{ .Display }}</div> {{ end}}
                            {{ range .Mags }} <div><img alt="Mag" src="/static/Mag_icon.png"/> {{ .Display }}</div> {{ end}}
                        </div>
                    {{ end }}
                </div>
            </div>
            <div class="col-12 col-lg-6">
                <div class="psostats-chart">
                </div>
            </div>
        </div>
        {{ range $i, $mapData := .MapData }}
        <div class="row">
            <div class="col">
                <h4 class="psostats-equipment">{{ .MapName }}</h4>
                <div id="map{{$i}}{{.MapNum}}_{{.MapVariation}}" class="map"></div>
            </div>
        </div>
        {{ end }}
        <div class="row">
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="hp-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-alive-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-hp-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-killed-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="sd-chart"></div>
                </div>
            </div>
            {{/* Some older games don't include PB */}}
            {{ if gt (len .PbRanges) 2}}
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="pb-chart"></div>
                </div>
            </div>
            {{ end }}

            <div class="col-12">
                <div class="psostats-chart">
                    <div id="meseta-chart"></div>
                </div>
            </div>
            {{ if gt .Game.FTUsed 0 }}
                <div class="col-12">
                    <div class="psostats-chart">
                        <div id="ft-chart"></div>
                    </div>
                </div>
            {{ end }}
        </div>
    </div>
    </body>
    </html>
    <script>
        window.Apex = {
            chart: {
                foreColor: '#ccc',
                toolbar: {
                    show: false
                },
                width: "100%",
                height: 230,
            },
            tooltip: {
                theme: 'dark'
            },
            stroke: {
                curve: 'stepline',
                width: 2
            },
            dataLabels: {
                enabled: false
            },
            xaxis: { tickAmount: 10 },
            yaxis: {
                labels: {
                    minWidth: 40
                }
            },
        };

        const options = {
            title: {
                text: 'HP'
            },
            chart: {
                id: 'hptp',
                type: 'line',
                group: "group1",
            },
            stroke: {
                width: 3
            },
            series: [{
                name: 'HP',
                data: [{{ range $key, $val := .HpRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#a43a3a'
            }{{if gt .Game.TPUsed 0}},{
                name: 'TP',
                data: [{{ range $key, $val := .TpRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            } {{end}}],
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                        {{ range $key, $value := .InvincibleRanges }}{x: {{ $key }}, x2: {{ $value }}, opacity: 0.6, fillColor: '#ffd412'},{{ end }}
                ]
            }
        };
        const monstersAliveOptions = {
            title: {
                text: 'Monsters Alive'
            },
            chart: {
                id: 'monstersAlive',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Monsters Alive',
                data: [{{ range $key, $val := .MonstersAliveRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const monsterHpPoolOptions = {
            title: {
                text: 'Total Monster HP'
            },
            chart: {
                id: 'monsterHpPool',
                type: 'area',
                group: "group1",
            },
            series: [{
                name: 'Total Monster HP',
                data: [{{ range $key, $val := .HpPoolRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            colors: ['#ccc'],
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const monstersKilledOptions = {
            title: {
                text: 'Monsters Killed'
            },
            chart: {
                id: 'monstersKilled',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Monsters Killed',
                data: [{{ range $key, $val := .MonstersKilledRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const sdOptions = {
            title: {
                text: 'Shifta/Deband'
            },
            chart: {
                id: 'sd',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Deband',
                data: [{{ range $key, $val := .DebandRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            },{
                name: 'Shifta',
                data: [{{ range $key, $val := .ShiftaRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#a43a3a'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }

        const pbOptions = {
            title: {
                text: 'Photon Blast'
            },
            chart: {
                id: 'pb',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'PB',
                data: [{{ range $key, $val := .PbRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const mesetaOptions = {
            title: {
                text: 'Meseta Charged'
            },
            chart: {
                id: 'meseta',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Meseta Charged',
                data: [{{ range $key, $val := .MesetaChargedRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#b08313'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const hpChart = new ApexCharts(document.querySelector("#hp-chart"), options);
        hpChart.render();
        const monstersAliveChart = new ApexCharts(document.querySelector("#monsters-alive-chart"), monstersAliveOptions);
        monstersAliveChart.render();
        const monsterHpPoolChart = new ApexCharts(document.querySelector("#monsters-hp-chart"), monsterHpPoolOptions);
        monsterHpPoolChart.render();
        const monstersKilledChart = new ApexCharts(document.querySelector("#monsters-killed-chart"), monstersKilledOptions);
        monstersKilledChart.render();
        const sdChart = new ApexCharts(document.querySelector("#sd-chart"), sdOptions);
        sdChart.render();
        const pbChart = new ApexCharts(document.querySelector("#pb-chart"), pbOptions);
        pbChart.render();
        const mesetaChart = new ApexCharts(document.querySelector("#meseta-chart"), mesetaOptions);
        mesetaChart.render();
        {{ if gt .Game.FTUsed 0 }}
        const ftOptions = {
            title: {
                text: 'Freeze Traps'
            },
            chart: {
                id: 'ft',
                type: 'line',
                group: "group1",
            },
            stroke: {
                width: 3
            },
            series: [{
                name: 'FT',
                data: [{{ range $key, $val := .FreezeTrapRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            }],
            xaxis: { tickAmount: 10 },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const ftChart = new ApexCharts(document.querySelector("#ft-chart"), ftOptions);
        ftChart.render();
        {{ end }}

        const weaponDonutOptions = {
            series: [ {{ range .Weapons }} {{ .SecondsEquipped }}, {{ end }}],
            labels: [ {{ range .Weapons }} "{{ .Display }}", {{ end }}],
            chart: {
                type: 'donut',
            },
            theme: {
                palette: 'palette3'
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        height: 400
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };

        const weaponDonutChart = new ApexCharts(document.querySelector("#weapon-donut"), weaponDonutOptions);
        weaponDonutChart.render();

        {{ if gt (len .MapData) 0 }}
        const mapImages = {
            map0_0: L.imageOverlay('/static/maps/ruins2_1.jpg', [[-512, -20], [122, 1090]]),
            map1_0: L.imageOverlay('/static/maps/forest1_0.jpg', [[-160, -200], [160, 200]]),
            map2_0: L.imageOverlay('/static/maps/forest2.jpg', [[-158,-180], [166,165]]),
            map3_0: L.imageOverlay('/static/maps/ruins2_1.jpg', [[-512, -20], [122, 1090]]),
            map4_0: L.imageOverlay('/static/maps/cave2_0.jpg', [[-20, -175], [775, 550]]),
            map4_1: L.imageOverlay('/static/maps/cave2_1.jpg', [[-80, -175], [700, 337.5]]),
            map4_2: L.imageOverlay('/static/maps/cave2_2.jpg', [[-150, -50], [450, 800]]),
            map4_3: L.imageOverlay('/static/maps/cave2_3.jpg', [[-60, -325], [425, 225]]),
            map4_4: L.imageOverlay('/static/maps/cave2_4.jpg', [[-175, -275], [275, 250]]),
            map5_4: L.imageOverlay('/static/maps/cave3_4.jpg', [[-200, -238], [100, 236]]),
            map6_0: L.imageOverlay('/static/maps/mine1_0.jpg', [[-475, -25], [200, 850]]),
            map6_1: L.imageOverlay('/static/maps/mine1_1.jpg', [[-450, -75], [50, 750]]),
            map6_2: L.imageOverlay('/static/maps/mine1_2.jpg', [[-425, -25], [50, 800]]),
            map6_3: L.imageOverlay('/static/maps/mine1_3.jpg', [[-200, -225], [200, 225]]),
            map6_4: L.imageOverlay('/static/maps/mine1_4.jpg', [[-125, -175], [300, 175]]),
            map6_5: L.imageOverlay('/static/maps/mine1_5.jpg', [[-150, -375], [150, 425]]),
            map7_4: L.imageOverlay('/static/maps/mine2_4.jpg', [[-250, -112.5], [150, 375]]),
            map8_0: L.imageOverlay('/static/maps/ruins1_0.jpg', [[-350, -160], [350, 500]]),
            map9_0: L.imageOverlay('/static/maps/ruins2_0.jpg', [[-250, -25], [350, 1125]]),
            map9_1: L.imageOverlay('/static/maps/ruins2_1.jpg', [[-512, -20], [122, 1090]]),
            map10_3: L.imageOverlay('/static/maps/map10_3.png', [[-300, -300], [250, 250]]),
            map10_4: L.imageOverlay('/static/maps/ruins3_4.jpg', [[-205, -237.5], [325, 425]]),
            map11_0: L.imageOverlay('/static/maps/dragon_0.jpg', [[-87, -102], [96, 94]]),
            map12_0: L.imageOverlay('/static/maps/drl_0.jpg', [[-24, -24], [25, 24]]),
            map13_0: L.imageOverlay('/static/maps/volopt.jpg', [[-32.5, -37.5], [32.5, 37.5]]),
            map14_0: L.imageOverlay('/static/maps/falz_0.jpg', [[-62.5, -62.5], [62.5, 62.5]]),
            map19_1: L.imageOverlay('/static/maps/temple1_1.jpg', [[-250, -275], [350, 300]]),
            map19_2: L.imageOverlay('/static/maps/temple1_2.jpg', [[-250, -300], [200, 200]]),
            map20_1: L.imageOverlay('/static/maps/temple2_1.jpg', [[-240, -275], [265, 287.5]]),
            map20_2: L.imageOverlay('/static/maps/temple2_2.jpg', [[-177.5, -255], [175, 275]]),
            map21_0: L.imageOverlay('/static/maps/space1_0.jpg', [[-155, -390], [300, 400]]),
            map21_1: L.imageOverlay('/static/maps/map21_1.png', [[-275, -300], [225, 300]]),
            map21_2: L.imageOverlay('/static/maps/space1_2.jpg', [[-350, -450], [350, 50]]),
            map22_0: L.imageOverlay('/static/maps/space2_0.jpg', [[-325, -350], [225, 375]]),
            map22_1: L.imageOverlay('/static/maps/space2_1.jpg', [[-200, -350], [225, 350]]),
            map23_0: L.imageOverlay('/static/maps/cca_0.jpg', [[-237.5, -662.5], [162.5, 62.5]]),
            map24_0: L.imageOverlay('/static/maps/jungle0_0.jpg', [[-150, -225], [275, 200]]),
            map27_0: L.imageOverlay('/static/maps/seaside_0.jpg', [[-200, -550], [180, 50]]),
            map28_0: L.imageOverlay('/static/maps/seabed1_0.jpg', [[-475, -275], [162.5, 475]]),
            map28_1: L.imageOverlay('/static/maps/seabed1_1.jpg', [[-350, -350], [250, 262.5]]),
            map29_2: L.imageOverlay('/static/maps/seabed2_2.jpg', [[-350, -400], [350, 275]]),
            map30_0: L.imageOverlay('/static/maps/gryffon_0.jpg', [[-100, -100], [100, 100]]),
            map31_0: L.imageOverlay('/static/maps/olga_0.jpg', [[-30, -30], [30, 30]]),
            map32_0: L.imageOverlay('/static/maps/temple3_0.jpg', [[-25, -25], [25, 80]]),
            map33_0: L.imageOverlay('/static/maps/space3_0.jpg', [[-100, -100], [105, 110]]),
            map35_0: L.imageOverlay('/static/maps/tower_0.jpg', [[-100, -100], [105, 110]]),
            map36_0: L.imageOverlay('/static/maps/crater_east_0.jpg', [[-225, -300], [1675, 925]]),
            map37_0: L.imageOverlay('/static/maps/map37_0.png', [[-300, -160], [160, 1500]]),
            map38_0: L.imageOverlay('/static/maps/crater_south_0.jpg', [[-342.5, -342.5], [342.5, 342.5]]),
            map39_0: L.imageOverlay('/static/maps/crater_north_0.jpg', [[-342.5, -342.5], [342.5, 342.5]]),
            map40_0: L.imageOverlay('/static/maps/crater_int_0.jpg', [[-342.5, -342.5], [342.5, 342.5]]),
            map41_0: L.imageOverlay('/static/maps/desert1_0.jpg', [[-675, -950], [110, 110]]),
            map42_0: L.imageOverlay('/static/maps/desert2_0.jpg', [[-275, -275], [275, 275]]),
            map43_0: L.imageOverlay('/static/maps/map43_0.png', [[-400, -100], [425, 950]]),
            map44_0: L.imageOverlay('/static/maps/meteor_impact_0.jpg', [[-150, -250], [250, 200]]),
        }

        const playbackOptions = {
            tickLen: 60,
            speed: 0.5,
            maxInterpolationTime: 2,
            playControl: true,
            dateControl: true,
            sliderControl: true,
            labels: true,
            popups: true,
            fadeMarkersWhenStale: true,
            staleTime: 1,
            marker: function(featureData) {
                let icon = L.divIcon({className: 'undefined-icon'});
                if (featureData.properties.title.startsWith("Player 1")) {
                    icon = L.divIcon({className: 'player1-icon'});
                } else if (featureData.properties.title.startsWith("Player 2")) {
                    icon = L.divIcon({className: 'player2-icon'});
                } else if (featureData.properties.title.startsWith("Player 3")) {
                    icon = L.divIcon({className: 'player3-icon'});
                } else if (featureData.properties.title.startsWith("Player 4")) {
                    icon = L.divIcon({className: 'player4-icon'});
                }
                return {
                    icon: icon,
                        getPopup: function (feature) {
                        return feature.properties.title;
                    }
                }
            }
        };
        {{ end }}

        {{ $playerIndex := .PlayerIndex }}
        {{ range $i, $mapData := .MapData }}
        {{ $mapNum := .MapNum }}
        {{ $mapVariation := .MapVariation }}
        const map{{$i}}{{.MapNum}}_{{.MapVariation}} = L.map('map{{$i}}{{.MapNum}}_{{.MapVariation}}', {crs: L.CRS.Simple});
        mapImages["map{{.MapNum}}_{{.MapVariation}}"].addTo(map{{$i}}{{.MapNum}}_{{.MapVariation}});

        {{ range $key,$value := .Movement }}
        const e{{$i}}{{$key}}_map{{$mapNum}}_{{$mapVariation}} ={"type":"Feature", "geometry":{"type":"MultiPoint","coordinates":[{{ range .Coordinates }}[{{ range . }}{{.}},{{ end }}],{{ end }}]},"properties":{"title":"{{- js $value.Title}}", "path_options" : { "color" : "{{$value.Color}}" }, "time":[{{ range .Time }}{{.}},{{end}}]}}
        {{ end }}
        map{{$i}}{{.MapNum}}_{{.MapVariation}}.setView([e{{$i}}{{$playerIndex}}_map{{.MapNum}}_{{.MapVariation}}.geometry.coordinates[0][1], e{{$i}}0_map{{.MapNum}}_{{.MapVariation}}.geometry.coordinates[0][0]], 1);
        const mapTracks{{$i}}_{{$mapNum}}_{{$mapVariation}} = [{{ range $key,$value := .Movement }}e{{$i}}{{$key}}_map{{$mapNum}}_{{$mapVariation}},{{ end }}];
        playback = new L.Playback(map{{$i}}{{$mapNum}}_{{$mapVariation}},  mapTracks{{$i}}_{{$mapNum}}_{{$mapVariation}}, null, playbackOptions)
        {{ end }}
    </script>
{{end}}
